basePath: /
definitions:
  auth.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  auth.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  auth.LogoutRequest:
    properties:
      refresh_token:
        example: eyJhbGciOiJ...
        type: string
    type: object
  auth.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  auth.TokenResponse:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
  handlers.AdminRoomResponse:
    properties:
      createdBy:
        type: string
      expiresAt:
        type: string
      id:
        type: string
      isActive:
        type: boolean
      maxParticipants:
        type: integer
      name:
        type: string
      participants:
        items:
          $ref: '#/definitions/handlers.ParticipantInfo'
        type: array
      settings:
        $ref: '#/definitions/models.RoomSettings'
      token:
        type: string
    type: object
  handlers.AuthResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/handlers.UserResponse'
    type: object
  handlers.CreateRoomRequest:
    properties:
      maxParticipants:
        example: 20
        type: integer
      name:
        example: my-room
        type: string
      settings:
        $ref: '#/definitions/models.RoomSettings'
    type: object
  handlers.ErrorResponse:
    properties:
      error:
        example: Error message
        type: string
    type: object
  handlers.JoinRoomRequest:
    properties:
      roomName:
        example: my-room
        type: string
    type: object
  handlers.ParticipantInfo:
    properties:
      email:
        type: string
      id:
        type: string
      isActive:
        type: boolean
      isChatBlocked:
        type: boolean
      isMuted:
        type: boolean
      isVideoOff:
        type: boolean
      joinedAt:
        type: string
      name:
        type: string
      permissions:
        type: string
      userId:
        type: string
    type: object
  handlers.RefreshRequest:
    properties:
      refresh_token:
        example: eyJhbGciOiJ...
        type: string
    type: object
  handlers.RoomResponse:
    properties:
      createdBy:
        type: string
      expiresAt:
        type: string
      id:
        type: string
      isActive:
        type: boolean
      maxParticipants:
        type: integer
      name:
        type: string
      settings:
        $ref: '#/definitions/models.RoomSettings'
      token:
        type: string
    type: object
  handlers.UserDetails:
    description: Detailed information about a user
    properties:
      accesses:
        description: '@Description List of user''s access levels'
        example:
        - user
        - admin
        items:
          type: string
        type: array
      createdAt:
        description: '@Description Account creation timestamp'
        example: "2025-01-01 12:00:00"
        type: string
      email:
        description: '@Description User''s email address'
        example: user@example.com
        type: string
      id:
        description: '@Description User''s unique identifier'
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      isActive:
        description: '@Description Whether the user account is active'
        example: true
        type: boolean
      name:
        description: '@Description User''s display name'
        example: John Doe
        type: string
      provider:
        description: '@Description Authentication provider'
        example: local
        type: string
    type: object
  handlers.UserListResponse:
    description: Response containing a list of users
    properties:
      users:
        description: '@Description List of user details'
        items:
          $ref: '#/definitions/handlers.UserDetails'
        type: array
    type: object
  handlers.UserResponse:
    properties:
      avatarUrl:
        example: https://example.com/avatar.jpg
        type: string
      email:
        example: user@example.com
        type: string
      id:
        example: "123456789"
        type: string
      name:
        example: John Doe
        type: string
      provider:
        example: google
        type: string
    type: object
  handlers.UserStatusUpdateRequest:
    description: Request body for updating user status
    properties:
      active:
        example: true
        type: boolean
    type: object
  handlers.UserStatusUpdateResponse:
    description: Response for user status update
    properties:
      message:
        example: User status updated successfully
        type: string
    type: object
  models.RoomSettings:
    properties:
      allowAudio:
        type: boolean
      allowChat:
        type: boolean
      allowVideo:
        type: boolean
      requireApproval:
        type: boolean
    type: object
  models.User:
    properties:
      accesses:
        items:
          type: string
        type: array
      avatarUrl:
        type: string
      createdAt:
        type: string
      email:
        type: string
      id:
        type: string
      isActive:
        type: boolean
      name:
        type: string
      provider:
        type: string
      updatedAt:
        type: string
    type: object
host: localhost:8090
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a Bedrud Backend API server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Bedrud Backend API
  version: "1.0"
paths:
  /admin/rooms:
    get:
      consumes:
      - application/json
      description: Get detailed information about all rooms (requires superadmin access)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.AdminRoomResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List all rooms (Admin only)
      tags:
      - admin
  /admin/rooms/{roomId}/token:
    post:
      consumes:
      - application/json
      description: Generate a new token for any user to join a room (requires superadmin
        access)
      parameters:
      - description: Room ID
        in: path
        name: roomId
        required: true
        type: string
      - description: User ID to generate token for
        in: query
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Generate room token (Admin only)
      tags:
      - admin
  /admin/users:
    get:
      consumes:
      - application/json
      description: Get a list of all users in the system (requires superadmin access)
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            $ref: '#/definitions/handlers.UserListResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List all users
      tags:
      - admin
  /admin/users/{id}/status:
    put:
      consumes:
      - application/json
      description: Activate or deactivate a user (requires superadmin access)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Status update
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UserStatusUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Status updated successfully
          schema:
            $ref: '#/definitions/handlers.UserStatusUpdateResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user status
      tags:
      - admin
  /auth/{provider}:
    get:
      description: Initiates the OAuth authentication process with the specified provider
      parameters:
      - description: Authentication provider (google, github, twitter)
        in: path
        name: provider
        required: true
        type: string
      produces:
      - application/json
      responses:
        "302":
          description: Redirect to provider's auth page
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Begin OAuth authentication
      tags:
      - auth
  /auth/{provider}/callback:
    get:
      description: Handles the OAuth callback from the authentication provider
      parameters:
      - description: Authentication provider (google, github, twitter)
        in: path
        name: provider
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: OAuth callback
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and get tokens
      parameters:
      - description: Login Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.TokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      summary: Login user
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Block a refresh token during logout
      parameters:
      - description: Logout request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Block refresh token
      tags:
      - auth
  /auth/me:
    get:
      consumes:
      - application/json
      description: Get current user profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Get new access token using refresh token
      parameters:
      - description: Refresh token request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: Registration Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      summary: Register new user
      tags:
      - auth
  /create-room:
    post:
      consumes:
      - application/json
      description: Creates a new room with LiveKit integration
      parameters:
      - description: Room creation parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateRoomRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.RoomResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new room
      tags:
      - rooms
  /health:
    get:
      description: Get the health status of the service
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Health check endpoint
      tags:
      - health
  /join-room:
    post:
      consumes:
      - application/json
      description: Join an existing room and get access token
      parameters:
      - description: Room join parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.JoinRoomRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.RoomResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Join a room
      tags:
      - rooms
  /ready:
    get:
      description: Get the readiness status of the service
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Readiness check endpoint
      tags:
      - health
securityDefinitions:
  BearerAuth:
    description: Enter the token with the `Bearer ` prefix, e.g. "Bearer abcde12345"
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
